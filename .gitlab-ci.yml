stages:
  - lint
  - build
  - test
  - build deb
  - build docker
  - publish
  - docs
  - downstreams
  - release

variables:
  DOCKER_TLS_CERTDIR: "/certs"

.testserver: &testserver
  variables:
    SIGNAL_CA: AAAAAgAAABSdqZ0bYZjYEKqWbhu75wrXJh13PAAABo8BAAVteWtleQAAAXfXkMrnAAAAAAAFWC41MDkAAARpMIIEZTCCA02gAwIBAgIQQAF1BIMUpMghjISpDBbN3zANBgkqhkiG9w0BAQsFADA/MSQwIgYDVQQKExtEaWdpdGFsIFNpZ25hdHVyZSBUcnVzdCBDby4xFzAVBgNVBAMTDkRTVCBSb290IENBIFgzMB4XDTIwMTAwNzE5MjE0MFoXDTIxMDkyOTE5MjE0MFowMjELMAkGA1UEBhMCVVMxFjAUBgNVBAoTDUxldCdzIEVuY3J5cHQxCzAJBgNVBAMTAlIzMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAuwIVKMz2oJTTDxLsjVWSw/iC8ZmmekKIp10mqrUrucVMsa+Oa/l1yKPXD0eUFFU1V4yeqKI5GfWCPEKpTm71O8Mu243AsFzzWTjn7c9p8FoLG77AlCQlh/o3cbMT5xys4Zvv2+Q7RVJFlqnBU840yFLuta7tj95gcOKlVKu2bQ6XpUA0ayvTvGbrZjR8+muLj1cpmfgwF126cm/7gcWt0oZYPRfH5wm78Sv3htzB2nFd1EbjzK0lwYi8YGd1ZrPxGPeiXOZT/zqItkel/xMY6pgJdz+dU/nPAeX1pnAXFK9jpP+Zs5Od3FOnBv5IhR2haa4ldbsTzFID9e1RoYvbFQIDAQABo4IBaDCCAWQwEgYDVR0TAQH/BAgwBgEB/wIBADAOBgNVHQ8BAf8EBAMCAYYwSwYIKwYBBQUHAQEEPzA9MDsGCCsGAQUFBzAChi9odHRwOi8vYXBwcy5pZGVudHJ1c3QuY29tL3Jvb3RzL2RzdHJvb3RjYXgzLnA3YzAfBgNVHSMEGDAWgBTEp7Gkeyxx+tvhS5B1/8QVYIWJEDBUBgNVHSAETTBLMAgGBmeBDAECATA/BgsrBgEEAYLfEwEBATAwMC4GCCsGAQUFBwIBFiJodHRwOi8vY3BzLnJvb3QteDEubGV0c2VuY3J5cHQub3JnMDwGA1UdHwQ1MDMwMaAvoC2GK2h0dHA6Ly9jcmwuaWRlbnRydXN0LmNvbS9EU1RST09UQ0FYM0NSTC5jcmwwHQYDVR0OBBYEFBQusxe3WFbLrlAJQOYfr52LFMLGMB0GA1UdJQQWMBQGCCsGAQUFBwMBBggrBgEFBQcDAjANBgkqhkiG9w0BAQsFAAOCAQEA2UzgyfWEiDcx27sT4rP8i2tiEmxYt0l+PAK3qB8oYevO4C5z70kHejWEHx2taPDY/laBL21/WKZuNTYQHHPD5b1tXgHXbnL7KqC401dk5VvCadTQsvd8S8MXjohyc9z9/G2948kLjmE6Flh9dDYrVYA9x2O+hEPGOaEOa1eePynBgPayvUfLqjBstzLhWVQLGAkXXmNs+5ZnPBxzDJOLxhF2JIbeQAcH5H0tZrUlo5ZYyOqA7s9pO5b85o3AM/OJ+CktFBQtfvBhcJVd9wvlwPsk+uyOy2HI7mNxKKgsBTt375teA2TwUdHkhVNcsAKX1H7GNNLOEADksd86wuoXvgBtfFvkJtev/HkVWt0+vF+oTiEI9Q==
    SIGNAL_URL: https://signal-server.signald.org
    DEFAULT_SERVER_UUID: f70feaec-95b0-4519-b458-1ab0dec83777

clang-format:
  image: debian:buster-backports
  stage: lint
  before_script:
    - apt-get update && apt-get install -y clang-format-11 git python3 wget make
  script:
    - tools/format.sh
  needs: []
  rules:
    - when: on_success


.build:
  image: openjdk:${JAVA_VERSION}-jdk
  stage: build
  needs: []
  script:
    - 'export "VERSION=$(./version.sh)"'
    - 'echo "Version: ${VERSION}"'
    - ./gradlew installDist
  artifacts:
    paths:
      - build/
    expire_in: 30 days
  rules:
    - when: on_success

build:
  extends: .build
  parallel:
    matrix:
      - JAVA_VERSION: [8, 9, 10, 11, 12, 13, 14, 15]

build java11 x86_64-unknown-linux-gnu:
  extends: .build
  variables:
    JAVA_VERSION: 11

build java11 armv7-unknown-linux-gnueabihf:
  extends: .build
  variables:
    JAVA_VERSION: 11
    SIGNALD_TARGET: armv7-unknown-linux-gnueabihf

build java11 aarch64-unknown-linux-gnu:
  extends: .build
  variables:
    JAVA_VERSION: 11
    SIGNALD_TARGET: aarch64-unknown-linux-gnu


build deb x86_64-unknown-linux-gnu:
  image: registry.gitlab.com/signald/infrastructure/signald-builder-x86:d5e68709
  stage: build deb
  needs: []
  before_script:
    - export VERSION="$(./version.sh)"
    - echo "Building signald version $VERSION"
    - "sed -i 's/^Architecture:.*/Architecture: amd64/g' debian/control"
  script:
    - gbp dch --ignore-branch --debian-tag="%(version)s" --git-author --new-version="${VERSION}"
    - dpkg-buildpackage -b
    - mv ../signald_* .
  artifacts:
    paths:
      - "signald_*"
    expire_in: 30 days
  rules:
    - if: '$CI_PROJECT_PATH == "signald/signald" && $CI_COMMIT_REF_PROTECTED == "true"'
      when: on_success
    - when: manual
      allow_failure: true

build deb aarch64-unknown-linux-gnu:
  image: registry.gitlab.com/signald/infrastructure/signald-builder-arm64-v8:010941fc
  stage: build deb
  needs: []
  tags: [arm-builder]
  before_script:
    - export VERSION="$(./version.sh)"
    - echo "Building signald version $VERSION"
    - "sed -i 's/^Architecture:.*/Architecture: arm64/g' debian/control"
  script:
    - gbp dch --ignore-branch --debian-tag="%(version)s" --git-author --new-version="${VERSION}"
    - dpkg-buildpackage -b
    - mv ../signald_* .
  artifacts:
    paths:
      - "signald_*"
    expire_in: 30 days
  rules:
    - if: '$CI_PROJECT_PATH == "signald/signald" && $CI_COMMIT_REF_PROTECTED == "true"'
      when: on_success
    - when: manual
      allow_failure: true

build deb armv7-unknown-linux-gnueabihf:
  image: registry.gitlab.com/signald/infrastructure/signald-builder-arm-v7:010941fc
  stage: build deb
  needs: []
  tags: [arm-builder]
  before_script:
    - export VERSION="$(./version.sh)"
    - echo "Building signald version $VERSION"
    - "sed -i 's/^Architecture:.*/Architecture: armhf/g' debian/control"
  script:
    - gbp dch --ignore-branch --debian-tag="%(version)s" --git-author --new-version="${VERSION}"
    - dpkg-buildpackage -b
    - mv ../signald_* .
  artifacts:
    paths:
      - "signald_*"
    expire_in: 30 days
  rules:
    - if: '$CI_PROJECT_PATH == "signald/signald" && $CI_COMMIT_REF_PROTECTED == "true"'
      when: on_success
    - when: manual
      allow_failure: true


.docker-buildx:
  image: jdrouet/docker-with-buildx:stable
  stage: build docker
  tags: [docker-builder]
  needs: []
  before_script: # per recommendations from https://github.com/docker/buildx/issues/495#issuecomment-754200673
    - docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
    - docker buildx create --name cibuilder --driver docker-container --use
    - docker buildx inspect --bootstrap
    - docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}
    - export VERSION="$(./version.sh | sed 's#+#-#g' | sed 's#/#-#g')"
    - DOCKER_PLATFORM=$(echo "${PLATFORM:6}" | sed 's#/#-#g')
  script:
    - docker buildx build --platform "${PLATFORM}" --build-arg "CI_BUILD_REF_NAME=${CI_BUILD_REF_NAME}" --build-arg "CI_COMMIT_SHA=${CI_COMMIT_SHA}" -t "${CI_REGISTRY_IMAGE}:${VERSION}-${DOCKER_PLATFORM}" --push .
  rules:
    - if: '$CI_PROJECT_NAMESPACE == "signald"'
      when: on_success
    - when: manual
      allow_failure: true

docker amd64:
  extends: .docker-buildx
  variables:
    PLATFORM: linux/amd64

docker arm64:
  extends: .docker-buildx
  variables:
    PLATFORM: linux/arm64/v8

docker armv7:
  extends: .docker-buildx
  variables:
    PLATFORM: linux/arm/v7

docker manifest:
  stage: publish
  image: jdrouet/docker-with-buildx:stable
  needs: ["docker amd64", "docker arm64", "docker armv7"]
  tags: [docker-builder]
  before_script:
    - docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}
    - if [[ "${CI_COMMIT_REF_PROTECTED}" == "true" ]]; then docker login -u ${DOCKER_HUB_USERNAME} -p ${DOCKER_HUB_PASSWORD}; fi
    - export VERSION="$(./version.sh | sed 's#+#-#g' | sed 's#/#-#g')"
  script:
    - |
      for platform in amd64 arm64-v8 arm-v7; do
        set -x
        docker pull --quiet "${CI_REGISTRY_IMAGE}:${VERSION}-${platform}"
        set +x
      done
    - docker manifest create "${CI_REGISTRY_IMAGE}:${VERSION}" "${CI_REGISTRY_IMAGE}:${VERSION}-amd64" "${CI_REGISTRY_IMAGE}:${VERSION}-arm64-v8" "${CI_REGISTRY_IMAGE}:${VERSION}-arm-v7"
    - docker manifest push "${CI_REGISTRY_IMAGE}:${VERSION}"
    - |
      if [ "${CI_COMMIT_REF_PROTECTED}" == "true" ]; then 
        set -x
        for platform in amd64 arm64-v8 arm-v7; do
          docker tag "${CI_REGISTRY_IMAGE}:${VERSION}-${platform}" "docker.io/signald/signald:${VERSION}-${platform}"
          docker push --quiet "docker.io/signald/signald:${VERSION}-${platform}"
        done

        # count commits since last tag
        commits="$(git rev-list $(git describe --always --abbrev=0 HEAD)..HEAD --count)"
        if [ "${commits}" = "0" ]; then # an actual release
          docker -l debug manifest create "docker.io/signald/signald:${VERSION}" "docker.io/signald/signald:${VERSION}-amd64" "docker.io/signald/signald:${VERSION}-arm64-v8" "docker.io/signald/signald:${VERSION}-arm-v7"
          docker -l debug manifest push "docker.io/signald/signald:${VERSION}"
        fi

        docker -l debug manifest create "docker.io/signald/signald:latest" "docker.io/signald/signald:${VERSION}-amd64" "docker.io/signald/signald:${VERSION}-arm64-v8" "docker.io/signald/signald:${VERSION}-arm-v7"
        docker -l debug manifest push "docker.io/signald/signald:latest"
        
        set +x # to avoid printing tokens
        echo "Authenticating to docker hub..."
        token=$(curl -sfd "{\"username\": \"${DOCKER_HUB_USERNAME}\", \"password\": \"${DOCKER_HUB_PASSWORD}\"}" -H "Content-Type: application/json" https://hub.docker.com/v2/users/login/ | jq -r '.token')
        for platform in amd64 arm64-v8 arm-v7; do
          echo "deleting tag ${VERSION}-${platform}"
          curl --fail -s -X DELETE -H "Authorization: JWT ${token}" https://hub.docker.com/v2/repositories/signald/signald/tags/${VERSION}-${platform}/
        done

        echo "image pushed to docker.io/signald/signald:${VERSION}"
      fi
  rules:
    - if: '$CI_PROJECT_PATH == "signald/signald" && $CI_COMMIT_BRANCH'
      when: on_success
    - when: manual
      allow_failure: true


unit tests x86:
  <<: *testserver
  image: openjdk:11-jdk
  stage: test
  needs: []
  before_script:
    - cp tools/log4j2.xml src/main/resources/log4j2.xml
  script:
    - ./gradlew test
  rules:
    - when: on_success
  artifacts:
    when: always
    reports:
      junit: build/test-results/test/**/TEST-*.xml

unit tests aarch64-unknown-linux-gnu:
  <<: *testserver
  image: debian
  stage: test
  tags: [arm-builder]
  needs: []
  before_script:
    - apt update && apt install -y make openjdk-11-jdk-headless
  script:
    - ./gradlew test
  rules:
    - if: '$CI_PROJECT_PATH == "signald/signald" && $CI_COMMIT_REF_PROTECTED == "true"'
      when: on_success
    - when: manual
      allow_failure: true

unit tests x86_64-apple-darwin:
  <<: *testserver
  image: debian
  stage: test
  tags: [darwin-builder]
  needs: []
  before_script:
    - apt update && apt install -y make openjdk-11-jdk-headless
  script:
    - export PATH=/usr/local/opt/openjdk/bin:$PATH # work around issue with brew installed java
    - ./gradlew test
  after_script:
    - rm -rf ~/.config/signald
  rules:
    - if: '$CI_PROJECT_PATH == "signald/signald" && $CI_COMMIT_REF_PROTECTED == "true"'
      when: on_success
      allow_failure: true # until the darwin machine gets downgraded to a supported java version or signald adds support for java 17
    - when: manual
      allow_failure: true

publish debian packages:
  image: registry.gitlab.com/signald/infrastructure/signald-builder-x86:d5e68709
  stage: publish
  tags: [deb-signer]
  needs: ["build deb x86_64-unknown-linux-gnu", "build deb aarch64-unknown-linux-gnu", "build deb armv7-unknown-linux-gnueabihf"]
  script:
    - tools/aptly-publish.sh
  variables:
    DISTRIBUTION: unstable
  rules:
    - if: '$CI_PROJECT_PATH == "signald/signald" && $CI_COMMIT_REF_PROTECTED == "true" && $CI_COMMIT_BRANCH'
      when: on_success

validate protocol:
  image: golang:latest
  stage: docs
  before_script:
    - apt-get update && apt-get install -y openjdk-11-jdk-headless
  script:
    - build/install/signald/bin/signald --dump-protocol > protocol.json
    - go run ./tools/protocol-validator < protocol.json
  needs: ["build java11 x86_64-unknown-linux-gnu"]
  artifacts:
    paths:
      - protocol.json
    expire_in: 1 year
    reports:
      metrics: metrics.txt
  rules:
    - when: on_success
  allow_failure: true

signald.org-branch:
  image: debian
  stage: docs
  before_script:
    - echo 'deb http://deb.debian.org/debian buster-backports main' > /etc/apt/sources.list.d/backports.list
    - apt-get update && apt-get install -t buster-backports -y hugo golang-go
    - apt-get install -y jq locales python3 python3-requests python3-pip openjdk-11-jdk-headless curl git
    - apt install -y --allow-downgrades libcurl3-gnutls/stable  # wtf is this shit? https://superuser.com/questions/1642858/git-on-debian-10-backports-throws-fatal-unable-to-access-https-github-com-us
    - pip3 install anybadge
    - sed -i '/en_US.UTF-8/s/^# //g' /etc/locale.gen && locale-gen
    - git clone https://gitlab.com/signald/signald.org
  script:
    - mkdir -p signald.org/content/signaldctl/reference
    - SIGNALDCTL_PUBLIC_DOC_MODE=on ./signaldctl doc -o md ./signald.org/content/signaldctl/reference
    - build/install/signald/bin/signald --dump-protocol | jq . > ./signald.org/content/protocol.json
    - cd signald.org
    - go run generate.go < content/protocol.json
    - mkdir -p themes/hugo-geekdoc/
    - curl -L https://github.com/thegeeklab/hugo-geekdoc/releases/latest/download/hugo-geekdoc.tar.gz | tar -xz -C themes/hugo-geekdoc/ --strip-components=1
    - python3 ./generate-badges.py
    - sed -i "s#https://signald.org#https://signald.gitlab.io/-/signald/-/jobs/${CI_JOB_ID}/artifacts/public/#" config.toml
    - hugo
    - mv public ../public
  artifacts:
    paths:
      - public
    expose_as: signald dot org preview
    expire_in: 1 month
  rules:
    - if: '$CI_COMMIT_REF_PROTECTED == "false"'
  needs:
    - "build java11 x86_64-unknown-linux-gnu"
    - project: signald/signald-go
      job: build:x86
      ref: main
      artifacts: true

signald.org:
  stage: downstreams
  needs: ["validate protocol"]
  trigger: signald/signald.org
  only:
    - main

release:
  stage: release
  image: debian:latest
  only:
    - tags
  before_script:
    - apt update
    - apt install -y python3-requests
  script:
    - python3 ./tools/release/ci-create.py
